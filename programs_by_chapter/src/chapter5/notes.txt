
Tyler Bonnette
26 Feb 2015
Chapter 5 Notes - Control Statements and Iteration

=========================================================================

If Statements

Conditional branch statement, and generally in the form of 
	if (condition)
		statment1;
	else
		statement2;
		
So far all the programs have only included "if" and not "else."

All in all if statements in Java are more or less the same as any other
	language.

See If.java for syntax

=========================================================================

Switch Statements

Switch is useful when you want to select one of several alternatives based
	on the value of one integer, character, or string variable.
	
Switch statements differ from If statements in that
	- Switch can only check for equality whereas operators like less than
		and greater than can be used in if statements
	- No two case constants in the same switch statement can have identical
		values.
	- A switch statement is more efficient, compiler-wise, than a set of
		nested if statements.
		
See Switch.java for syntax and example

=========================================================================

Iteration Statements
=========================================================================

While (do-While) Statements

Works the same as in Python and C++. The biggest difference is
the do-while statement.

Whereas typically while statements follow the form:
	while (condition is false)
		<do something>

do-while statements are the exact opposite:
	do {
		<do something>
	} while (condition is true)
		
See While.class and Do.class for syntax

=========================================================================

For (aka For-each) Statements

Same as other languages. BORING.
 
See For.class for syntax

=========================================================================

Jump Statements	

=========================================================================

Break
	Functions the same as Python and C++

=========================================================================

Continue

When iterating a continue statement can to another
part of the code block without necessarily iterating 
through/executing everything.

See Continue.class

=========================================================================

Return

(More detailed explanation in a later chapter)
Return statements are used to "explicity return from a
method," that is, cause the method to stop/be skipped
if the return statement is true.

See Return.class

=========================================================================